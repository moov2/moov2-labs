@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>HTML5 Responsive Images</h2>
<hr class="main-underline" />

With the increase growth of people using mobile to browse the Internet it has never been more important to improve page speed. 
Images can have a huge affect on page speed so it is important to serve the right image for the users context. 
When a user is browsing the Internet with their mobile and currently hasn't got a wireless connection, then it would make more sense to serve a lower quality image that has a smaller file size.
However, if the user is on a fast Internet connection on their desktop PC then they desire the better quality images. 
Currently HTML doesn't offer the markup to support defining the appropriate images based on the device and context, so people have taken it into their own hands here are some of the suitable solutions.

<h3>HiSrc</h3>

HiSrc is an open source solution to the responsive image problem. 
<a href="https://github.com/teleject/hisrc">Hosted on Github</a>, HiSrc is a JQuery plugin that first loads a mobile friendly version, then checks the connection speed and browser capatabilities to see if a more appropriate image can be loaded.
When using HiSrc you must specify three version of an image in your HTML markup, a mobile friendly version, a larger version and a high resolution version (for devices capabale of higher pixel density). 

<h4>Usage</h4>

Firstly your need to download <b>hisrc.js</b> from the HiSrc Github page. The web page that your image will be displayed on will require to have <a href="http://jquery.com/">JQuery</a> and hisrc.js file included.

<pre class="language-markup"><code>&lt;script src="/js/vendor/jquery-1.8.1.min.js"&gt;&lt;/script&gt;
&lt;script src="/js/vendor/hisrc.js"&gt;&lt;/script&gt;</code></pre>

Now the code to specify the responsive image is similiar to how you would include an image in the usual way. 
The difference is that you need to include a couple of extra properties that specify the URL to the alternative images.

<pre class="language-markup"><code>&lt;img src="/img/200x100.png" data-1x="/img/400x200.png" data-2x="/img/800x400.png" /&gt;</code></pre>

As you can probably guess, the <strong>data-1x</strong> holds the URL for the large image and <strong>data-2x</strong> has the URL for the high res image.

Finally we need to tell the HiSrc library which elements should be handled. 
This is done using JQuery selectors to target the DOM element as shown below.

<pre class="language-javascript">
<code>$(document).ready(function(){
    $('img').hisrc(); 
}</code>
</pre>

So the code above will target every image on the page, this isn't recommended, a better strategy would be to create a specific class that can be used to specify that an image is to he handled by HiSrc.

It is also recommended to speed things up that you include the line below somewhere in your JavaScript so it can be called before the DOM ready event is fired.

<pre class="language-javascript">
<code>$.hisrc.speedTest();</code>
</pre>

This will trigger the test that determines whether the users connection speed is quick enough to load the large images.

<h4>Example</h4>

You can view an example of the HiSrc library in action <a href="/ResponsiveImages/HiSrc">here</a>.

<h3>Picturefill</h3>

Picturefill is an open source solution to the responsive image problem. 
<a href="https://github.com/scottjehl/picturefill">Hosted on Github</a>, Picturefill is a JavaScript library that uses a similiar approach to media queries with CSS to determine which image to load and display. 
Just like CSS it will load the appropriate image for the screen size that matches the media query definition, so if the browser is resized then screen size definitions that are hit have their images loaded.
The downside compared is that Picturefill doesn't check connection speed, so when the screen size is small, say the user is using a mobile phone, it is deemed that the lowest quality image will be used, when infact the mobile has a reasonable connection because it is connected to the Internet via Wireless.

<h4>Usage</h4>

Firstly your need to download <strong>picturefill.js</strong> from the Github repository. Include the JS file into the web page that your image is displayed on.

<pre class="language-markup"><code>&lt;script src="/js/vendor/picturefill.js"&gt;&lt;/script&gt;</code></pre>

The markup for specifying the image is a little more involved than with HiSrc. 
Divs are used with the <strong>data-picture</strong> attribute that tells the JavaScript that this container contains the definition for a responsive image. 
The <strong>data-alt</strong> property on the parent div will apply the value to the alt tag for the img tag that will take the place when the JavaScript kicks in. 
Also in the example below, you can see that a fallback has been added for when the browser doesn't have JavaScript enabled.

<pre class="language-markup">
<code>&lt;div data-picture data-alt="Description of the image."&gt;
    &lt;div data-src="/img/200x100.png"&gt;&lt;/div&gt;
    &lt;div data-src="/img/400x200.png" data-media="(min-width: 400px)"&gt;&lt;/div&gt;
    &lt;div data-src="/img/800x400.png" data-media="(min-width: 800px)"&gt;&lt;/div&gt;

    &lt;!-- Fallback content for non-JS browsers. --&gt;
    &lt;noscript&gt;
        &lt;img src="/img/200x100.png" alt="Description of the image."&gt;
    &lt;/noscript&gt;
&lt;/div&gt;</code>
</pre>

This markup above is what may become the standard way of defining responsive images in HTML, where the first div in the example will become a <strong>picture</strong> element, and its children will be <strong>source</strong> elements. This standard is being <a href="http://www.w3.org/community/respimg/">discussed by a user group</a> and may appear in the future. 
Picturefill can also handle when the device has a pixel ratio higher than 1, there is <a href="https://github.com/scottjehl/picturefill#hd-media-queries">sample code displayed at the Github repository.</a>

<h4>Example</h4>

You can view an example of Picturefill in action <a href="/ResponsiveImages/Picturefill">here</a>.


